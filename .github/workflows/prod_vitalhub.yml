name: Build, Test, and Deploy Python app to Azure Web App - vitalhub

on:
  push:
    branches:
      - prod 
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read 

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install Python dependencies
        run: pip install -r requirements.txt
      
      - name: Cleaning testing files for package (if any committed by mistake)
        run: |
          rm -f db.sqlite3
          # rm -f .env # .env não deve estar no repositório

      - name: Create deployment package
        run: |
          # Exclui arquivos/pastas não necessários para o deploy do Django
          zip -r release.zip . -x "venv/*" "*.sqlite3" "__pycache__/*" "*.pyc" ".git/*" ".github/*" "cypress/*" "node_modules/*" "cypress.config.js" "package.json" "package-lock.json" "README.md" "*.log" ".env*" "Procfile_dev" "requirements_dev.txt" # Adicione outros que não precise

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create and start virtual environment for tests
        run: |
          python -m venv venv_test # Ambiente virtual para os testes
          source venv_test/bin/activate
      
      - name: Install Python dependencies for tests (Django, etc.)
        run: pip install -r requirements.txt
      
      - name: Apply Django migrations (for a test DB)
        run: |
          source venv_test/bin/activate
          # Para testes E2E, é comum usar um DB limpo. 
          # Se db.sqlite3 for usado, ele será criado aqui se não existir.
          rm -f db.sqlite3 # Garante um DB limpo para cada execução de teste se SQLite
          python manage.py migrate --noinput 
          # Se você tem 'seeders' ou dados iniciais para teste:
          # python manage.py loaddata initial_test_data.json

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install npm dependencies (Cypress)
        run: npm ci 

      - name: Start Django development server for E2E tests
        run: |
          source venv_test/bin/activate
          # Inicia o servidor Django em background.
          # A baseUrl 'http://127.0.0.1:8000/' no cypress.config.js deve corresponder.
          python manage.py runserver 0.0.0.0:8000 &

      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:

          wait-on: 'http://127.0.0.1:8000' 
          wait-on-timeout: 180 
          browser: chrome
          headless: true
          
      - name: Upload Cypress artifacts (videos, screenshots)
        if: always() 
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts-${{ github.run_number }}
          path: |
            cypress/videos
            cypress/screenshots

  deploy:
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write 
      contents: read 
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app 

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_C202779183584D3780E19B3E8D63216A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_C31D087566114D6B998041088388251A }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_E032F3A3A2E34CF4A9CC4FB839A1C1F3 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'vitalhub'
          slot-name: 'Production'
          package: '.'